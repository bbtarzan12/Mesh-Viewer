const float PI = 3.1415926535897932384626433832795;

const int NUM_LIGHTS = 8;
const float GAMMA = 2.2;

struct Light
{
	vec3 position;
	vec3 color;
	float power;
	bool isDirectional;
};

struct Texture2D
{
	sampler2D texture;
	vec4 defaultColor;
	bool use;
};

struct TextureCube
{
	samplerCube texture;
	vec4 defaultColor;
	bool use;
};

vec4 Sample(Texture2D t, vec2 UV)
{
	if(t.use)
	{
		return texture(t.texture, UV);
	}

	return t.defaultColor;
}

vec4 Sample(TextureCube t, vec3 UV)
{
	if(t.use)
	{
		return texture(t.texture, UV);
	}

	return t.defaultColor;
}

vec4 SampleLod(Texture2D t, vec2 UV, float lod)
{
	if(t.use)
	{
		return textureLod(t.texture, UV, lod);
	}

	return t.defaultColor;
}

vec4 SampleLod(TextureCube t, vec3 UV, float lod)
{
	if(t.use)
	{
		return textureLod(t.texture, UV, lod);
	}

	return t.defaultColor;
}

float saturate(float value)
{
	return clamp(value, 0, 1);
}

vec3 GammaCorrection(vec3 hdr)
{
	vec3 ldr = hdr / (1 + hdr);
	return pow(ldr, vec3(1.0 / GAMMA));
}

vec4 GammaCorrection(vec4 hdr)
{
	vec4 ldr = hdr / (1 + hdr);
	return pow(ldr, vec4(1.0 / GAMMA));
}