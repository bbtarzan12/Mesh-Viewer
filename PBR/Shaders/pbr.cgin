#include pbr_NDF.cgin
#include pbr_G.cgin
#include pbr_F.cgin
#include pbr_Diffuse.cgin

float RadicalInverseOfVanDerCorputSequence(uint bits) 
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}

vec2 Hammersley(uint i, uint N)
{
	return vec2(float(i)/float(N), RadicalInverseOfVanDerCorputSequence(i));
}

vec3 ImportanceSampleGGX(vec2 Xi, vec3 normal, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;

	float phi = 2.0 * PI * Xi.x;
	float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (alpha2 - 1) * Xi.y));
	float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

	float cosPhi = cos(phi);
	float sinPhi = sin(phi);
	
	vec3 up = abs(normal.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
	vec3 tangent   = normalize(cross(up, normal));
	vec3 biTangent = cross(normal, tangent);

	vec3 cartesian = vec3(sinTheta * cosPhi, sinTheta * sinPhi, cosTheta);
	vec3 worldDirection = cartesian.x * tangent + cartesian.y * biTangent + cartesian.z * normal;

	return normalize(worldDirection);
}

float GeometrySchlickGGXIBLSpecular(vec3 normal, vec3 v, float k)
{
	k = (k * k) / 2.0;
	float NdotV = saturate(dot(normal, v));

	float num = NdotV;
	float denom = NdotV * (1 - k) + k;

	return num / denom;
}

float GeometrySmithsMethodIBLSpecular(vec3 normal, vec3 viewDir, vec3 lightDir, float k)
{
	float viewSub = GeometrySchlickGGXIBLSpecular(normal, viewDir, k);
	float lightSub = GeometrySchlickGGXIBLSpecular(normal, lightDir, k);
	return viewSub * lightSub;
}

vec3 FresnelSchlickApproximationWithRoughness(vec3 F0, vec3 viewDir, vec3 normal, float roughness)
{
	float NdotV = saturate(dot(viewDir, normal));
	return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - NdotV, 5);
}

float NormalDistributionFunction(int index, vec3 normal, vec3 halfDir, float roughness)
{
	switch (index)
	{
		case 0: return NormalDistributionBlinnPhong(normal, halfDir, roughness);
		case 1: return NormalDistributionBeckmann(normal, halfDir, roughness);
		case 2: return NormalDistributionTrowbridgeReitzGGX(normal, halfDir, roughness);
	}
}

float GeometryFunction(int index, vec3 normal, vec3 viewDir, vec3 lightDir, float k)
{
	switch (index)
	{
		case 0: return GeometrySchlickGGXSmithsMethod(normal, viewDir, lightDir, k);
		case 1: return GeometryGGXSmithsMethod(normal, viewDir, lightDir, k);
	}
}

vec3 FresnelFunction(int index, vec3 F0, vec3 viewDir, vec3 halfDir)
{
	switch (index)
	{
		case 0: return FresnelSchlickApproximation(F0, viewDir, halfDir);
	}
}

vec3 DiffuseFunction(int index, vec3 albedo, vec3 normal, vec3 viewDir, vec3 lightDir, float roughness)
{
	switch (index)
	{
		case 0: return LambertianDiffuse(albedo);
		case 1: return OrenNayarDiffuse(albedo, normal, viewDir, lightDir, roughness);
	}
}