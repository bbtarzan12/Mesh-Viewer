float DistributionTrowbridgeReitzGGX(vec3 normal, vec3 halfDir, float roughness)
{
	float alpha = roughness * roughness;
	float alpha2 = alpha * alpha;
	float NdotH = saturate(dot(normal, halfDir));

	float num = alpha2;
	float denom = PI * pow(NdotH * NdotH * (alpha2 - 1) + 1, 2);

	return num / denom;
}

float GeometrySchlickGGX(vec3 normal, vec3 v, float k)
{
	k += 1;
	k = (k * k) / 8.0; // Direct Lighting Remapped
	float NdotV = saturate(dot(normal, v));

	float num = NdotV;
	float denom = NdotV * (1 - k) + k;

	return num / denom;
}

float GeometrySmithsMethod(vec3 normal, vec3 viewDir, vec3 lightDir, float k)
{
	float viewSub = GeometrySchlickGGX(normal, viewDir, k);
	float lightSub = GeometrySchlickGGX(normal, lightDir, k);
	return viewSub * lightSub;
}

vec3 FresnelSchlickApproximation(vec3 F0, vec3 viewDir, vec3 halfDir)
{
	float HdotV = dot(halfDir, viewDir);
	return F0 + (1.0 - F0) * pow(1.0 - HdotV, 5);
}

vec3 FresnelSchlickApproximationWithRoughness(vec3 F0, vec3 viewDir, vec3 halfDir, float roughness)
{
	float HdotV = dot(halfDir, viewDir);
	return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - HdotV, 5);
}